//The code has been made open source and is never to be sold.
//Chris Snell 2014
//CCSnell@gmail.com
//This is still being modified and edited to look less like a steming pile of crap...
//Some parts of the code snagged from J_Skoba and hiw MSGEQ7 fountain of knowledge.
//More is from the Adafruit Neopixel Uberguide
//The rest is my random fingersmashing.
 
#include <Adafruit_NeoPixel.h>
#include <Adafruit_NeoMatrix.h>
#include <Adafruit_GFX.h>
#endif

#define PIN 6

Adafruit_NeoMatrix matrix = Adafruit_NeoMatrix(13, 10, PIN,
  NEO_MATRIX_TOP     + NEO_MATRIX_LEFT +
  NEO_MATRIX_ROWS + NEO_MATRIX_ZIGZAG,
  NEO_GRB            + NEO_KHZ800);
int analogPin = 0; // read from multiplexer using analog input 0
int strobePin = 2; // strobe is attached to digital pin 2
int resetPin = 3; // reset is attached to digital pin 3
int spectrumValue[7]; // to hold a2d values
int SC = 0;
int S1 = 0;
int S2 = 0;
int S3 = 0;
int S4 = 0;
int S5 = 0;
int S6 = 0;
int S7 = 0;
int i = 0;
const uint16_t colors[] = {
matrix.Color(255,128,0), matrix.Color(0,128,128), matrix.Color(128,180,0), matrix.Color(225,124,0),
matrix.Color(144,128,0), matrix.Color(0,0,128), matrix.Color(68,128,0), matrix.Color(0,0,0)
}; //No these arent the final colors, cause they look like crap.

void setup()
{ matrix.begin();
 Serial.begin(9600);
 pinMode(analogPin, INPUT);
 pinMode(strobePin, OUTPUT);
 pinMode(resetPin, OUTPUT);
 analogReference(DEFAULT);
 digitalWrite(resetPin, LOW);
 digitalWrite(strobePin, HIGH);
}


void loop()
{
  matrix.fillScreen(0);
  digitalWrite(resetPin, HIGH);
  digitalWrite(resetPin, LOW);
  spectrumValue[i] = analogRead(analogPin);
  delay(5); //Tweak this variable for less/more lag
 
 for (int i = 0; i < 7; i++)
  {
      digitalWrite(strobePin, LOW);
    spectrumValue[i] = analogRead(analogPin);
    S1 = map(spectrumValue[0], 100, 400, 1, 13);
      matrix.drawFastVLine(0, 0, S1, colors[1]);  
      matrix.drawFastVLine(1, 0, S1, colors[1]);  
    delayMicroseconds(30);
    digitalWrite(strobePin, HIGH);
    digitalWrite(strobePin, LOW);
    S2 = map(spectrumValue[1], 100, 400, 1, 13);
      matrix.drawFastVLine(2, 0, S2, colors[2]); 
      matrix.drawFastVLine(3, 0, S2, colors[2]); 
    delayMicroseconds(30);
    digitalWrite(strobePin, HIGH);
    digitalWrite(strobePin, LOW);
    S3 = map(spectrumValue[2], 100, 400, 1, 13);
      matrix.drawFastVLine(4, 0, S3, colors[3]);  
      matrix.drawFastVLine(5, 0, S3, colors[3]); 
    delayMicroseconds(30);
    digitalWrite(strobePin, HIGH);
    digitalWrite(strobePin, LOW);
    S4 = map(spectrumValue[3], 100, 400, 1, 13);
      matrix.drawFastVLine(6, 0, S4, colors[4]); 
      matrix.drawFastVLine(7, 0, S4, colors[4]); 
    delayMicroseconds(30);
    digitalWrite(strobePin, HIGH);
    digitalWrite(strobePin, LOW);
    S5 = map(spectrumValue[4], 100, 400, 1, 13);
      matrix.drawFastVLine(8, 0, S5, colors[5]);  
      matrix.drawFastVLine(9, 0, S5, colors[5]);  
    delayMicroseconds(30);
    digitalWrite(strobePin, HIGH);
    digitalWrite(strobePin, LOW);
    S6 = map(spectrumValue[5], 100, 400, 1, 13);
      matrix.drawFastVLine(10, 0, S6, colors[6]);
      matrix.drawFastVLine(11, 0, S6, colors[6]);  
    delayMicroseconds(30);
    digitalWrite(strobePin, HIGH);
    digitalWrite(strobePin, LOW);
    S7 = map(spectrumValue[6], 100, 400, 1, 13);
      matrix.drawFastVLine(12, 0, S7, colors[7]); 
      matrix.drawFastVLine(13, 0, S7, colors[7]); 
    digitalWrite(strobePin, HIGH);
  }
  matrix.show();
}
